{"headers":{"access-control-allow-credentials":"true","access-control-allow-methods":"GET, HEAD, PUT, PATCH, POST, DELETE","access-control-allow-origin":"*","access-control-expose-headers":"Request-Id, Stripe-Manage-Version, Stripe-Should-Retry, X-Stripe-External-Auth-Required, X-Stripe-Privileged-Session-Required","access-control-max-age":"300","cache-control":"no-cache, no-store","connection":"keep-alive","content-length":"132","content-security-policy":"base-uri 'none'; default-src 'none'; form-action 'none'; frame-ancestors 'none'; img-src 'self'; script-src 'self' 'report-sample'; style-src 'self'; worker-src 'none'; upgrade-insecure-requests; report-uri https://q.stripe.com/csp-violation?q=u2b2hNNP1Gvoimz-S3QZQ5uTIUISnOvuV14L8FDx9zMp2oOYlAsGFXg54ka5uA9KCthreJnPGUyVubfw","content-type":"application/json","date":"Sun, 22 Jun 2025 05:06:39 GMT","server":"nginx","strict-transport-security":"max-age=63072000; includeSubDomains; preload","vary":"Origin","www-authenticate":"Bearer realm=\"Stripe\"","x-robots-tag":"none","x-wc":"ABHI"},"level":"error","message":"Create payment intent error: Invalid API Key provided: sk_test_******************-key","raw":{"headers":{"access-control-allow-credentials":"true","access-control-allow-methods":"GET, HEAD, PUT, PATCH, POST, DELETE","access-control-allow-origin":"*","access-control-expose-headers":"Request-Id, Stripe-Manage-Version, Stripe-Should-Retry, X-Stripe-External-Auth-Required, X-Stripe-Privileged-Session-Required","access-control-max-age":"300","cache-control":"no-cache, no-store","connection":"keep-alive","content-length":"132","content-security-policy":"base-uri 'none'; default-src 'none'; form-action 'none'; frame-ancestors 'none'; img-src 'self'; script-src 'self' 'report-sample'; style-src 'self'; worker-src 'none'; upgrade-insecure-requests; report-uri https://q.stripe.com/csp-violation?q=u2b2hNNP1Gvoimz-S3QZQ5uTIUISnOvuV14L8FDx9zMp2oOYlAsGFXg54ka5uA9KCthreJnPGUyVubfw","content-type":"application/json","date":"Sun, 22 Jun 2025 05:06:39 GMT","server":"nginx","strict-transport-security":"max-age=63072000; includeSubDomains; preload","vary":"Origin","www-authenticate":"Bearer realm=\"Stripe\"","x-robots-tag":"none","x-wc":"ABHI"},"message":"Invalid API Key provided: sk_test_******************-key","statusCode":401,"type":"invalid_request_error"},"rawType":"invalid_request_error","service":"nurox-api","stack":"Error: Invalid API Key provided: sk_test_******************-key\n    at res.toJSON.then.Error_js_1.StripeAPIError.message (/home/udara/Documents/CCCU/nurox-backend/node_modules/stripe/cjs/RequestSender.js:96:31)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-06-22 10:36:39","type":"StripeAuthenticationError"}
{"clientVersion":"5.22.0","level":"error","message":"Get token availability error: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:555:59\n\n  552 endDate.setHours(23, 59, 59, 999);\n  553 \n  554 // Get all appointments for this doctor on this date\n→ 555 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc5tixws000iaxareufhgthr\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n          },\n          tokenNumber: {\n          ~~~~~~~~~~~\n            not: null\n          },\n      ?   AND?: AppointmentWhereInput | AppointmentWhereInput[],\n      ?   OR?: AppointmentWhereInput[],\n      ?   NOT?: AppointmentWhereInput | AppointmentWhereInput[],\n      ?   id?: StringFilter | String,\n      ?   patientId?: StringFilter | String,\n      ?   type?: EnumAppointmentTypeFilter | AppointmentType,\n      ?   title?: StringFilter | String,\n      ?   description?: StringNullableFilter | String | Null,\n      ?   duration?: IntFilter | Int,\n      ?   location?: StringNullableFilter | String | Null,\n      ?   isVirtual?: BoolFilter | Boolean,\n      ?   meetingLink?: StringNullableFilter | String | Null,\n      ?   fee?: FloatNullableFilter | Float | Null,\n      ?   notes?: StringNullableFilter | String | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   patient?: UserRelationFilter | UserWhereInput,\n      ?   doctor?: UserRelationFilter | UserWhereInput,\n      ?   prescriptions?: PrescriptionListRelationFilter,\n      ?   labResults?: LabResultListRelationFilter,\n      ?   payments?: PaymentListRelationFilter\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nUnknown argument `tokenNumber`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"nurox-api","stack":"PrismaClientValidationError: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:555:59\n\n  552 endDate.setHours(23, 59, 59, 999);\n  553 \n  554 // Get all appointments for this doctor on this date\n→ 555 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc5tixws000iaxareufhgthr\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n          },\n          tokenNumber: {\n          ~~~~~~~~~~~\n            not: null\n          },\n      ?   AND?: AppointmentWhereInput | AppointmentWhereInput[],\n      ?   OR?: AppointmentWhereInput[],\n      ?   NOT?: AppointmentWhereInput | AppointmentWhereInput[],\n      ?   id?: StringFilter | String,\n      ?   patientId?: StringFilter | String,\n      ?   type?: EnumAppointmentTypeFilter | AppointmentType,\n      ?   title?: StringFilter | String,\n      ?   description?: StringNullableFilter | String | Null,\n      ?   duration?: IntFilter | Int,\n      ?   location?: StringNullableFilter | String | Null,\n      ?   isVirtual?: BoolFilter | Boolean,\n      ?   meetingLink?: StringNullableFilter | String | Null,\n      ?   fee?: FloatNullableFilter | Float | Null,\n      ?   notes?: StringNullableFilter | String | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   patient?: UserRelationFilter | UserWhereInput,\n      ?   doctor?: UserRelationFilter | UserWhereInput,\n      ?   prescriptions?: PrescriptionListRelationFilter,\n      ?   labResults?: LabResultListRelationFilter,\n      ?   payments?: PaymentListRelationFilter\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nUnknown argument `tokenNumber`. Available options are marked with ?.\n    at wn (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getTokenAvailability (/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:555:34)","timestamp":"2025-06-23 01:01:46"}
{"clientVersion":"5.22.0","level":"error","message":"Get token availability error: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:555:59\n\n  552 endDate.setHours(23, 59, 59, 999);\n  553 \n  554 // Get all appointments for this doctor on this date\n→ 555 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc5tixws000iaxareufhgthr\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n          },\n          tokenNumber: {\n          ~~~~~~~~~~~\n            not: null\n          },\n      ?   AND?: AppointmentWhereInput | AppointmentWhereInput[],\n      ?   OR?: AppointmentWhereInput[],\n      ?   NOT?: AppointmentWhereInput | AppointmentWhereInput[],\n      ?   id?: StringFilter | String,\n      ?   patientId?: StringFilter | String,\n      ?   type?: EnumAppointmentTypeFilter | AppointmentType,\n      ?   title?: StringFilter | String,\n      ?   description?: StringNullableFilter | String | Null,\n      ?   duration?: IntFilter | Int,\n      ?   location?: StringNullableFilter | String | Null,\n      ?   isVirtual?: BoolFilter | Boolean,\n      ?   meetingLink?: StringNullableFilter | String | Null,\n      ?   fee?: FloatNullableFilter | Float | Null,\n      ?   notes?: StringNullableFilter | String | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   patient?: UserRelationFilter | UserWhereInput,\n      ?   doctor?: UserRelationFilter | UserWhereInput,\n      ?   prescriptions?: PrescriptionListRelationFilter,\n      ?   labResults?: LabResultListRelationFilter,\n      ?   payments?: PaymentListRelationFilter\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nUnknown argument `tokenNumber`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"nurox-api","stack":"PrismaClientValidationError: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:555:59\n\n  552 endDate.setHours(23, 59, 59, 999);\n  553 \n  554 // Get all appointments for this doctor on this date\n→ 555 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc5tixws000iaxareufhgthr\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n          },\n          tokenNumber: {\n          ~~~~~~~~~~~\n            not: null\n          },\n      ?   AND?: AppointmentWhereInput | AppointmentWhereInput[],\n      ?   OR?: AppointmentWhereInput[],\n      ?   NOT?: AppointmentWhereInput | AppointmentWhereInput[],\n      ?   id?: StringFilter | String,\n      ?   patientId?: StringFilter | String,\n      ?   type?: EnumAppointmentTypeFilter | AppointmentType,\n      ?   title?: StringFilter | String,\n      ?   description?: StringNullableFilter | String | Null,\n      ?   duration?: IntFilter | Int,\n      ?   location?: StringNullableFilter | String | Null,\n      ?   isVirtual?: BoolFilter | Boolean,\n      ?   meetingLink?: StringNullableFilter | String | Null,\n      ?   fee?: FloatNullableFilter | Float | Null,\n      ?   notes?: StringNullableFilter | String | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   patient?: UserRelationFilter | UserWhereInput,\n      ?   doctor?: UserRelationFilter | UserWhereInput,\n      ?   prescriptions?: PrescriptionListRelationFilter,\n      ?   labResults?: LabResultListRelationFilter,\n      ?   payments?: PaymentListRelationFilter\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nUnknown argument `tokenNumber`. Available options are marked with ?.\n    at wn (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getTokenAvailability (/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:555:34)","timestamp":"2025-06-23 01:03:35"}
{"clientVersion":"5.22.0","level":"error","message":"Get token availability error: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:555:59\n\n  552 endDate.setHours(23, 59, 59, 999);\n  553 \n  554 // Get all appointments for this doctor on this date\n→ 555 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc5tixws000iaxareufhgthr\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n          },\n          tokenNumber: {\n          ~~~~~~~~~~~\n            not: null\n          },\n      ?   AND?: AppointmentWhereInput | AppointmentWhereInput[],\n      ?   OR?: AppointmentWhereInput[],\n      ?   NOT?: AppointmentWhereInput | AppointmentWhereInput[],\n      ?   id?: StringFilter | String,\n      ?   patientId?: StringFilter | String,\n      ?   type?: EnumAppointmentTypeFilter | AppointmentType,\n      ?   title?: StringFilter | String,\n      ?   description?: StringNullableFilter | String | Null,\n      ?   duration?: IntFilter | Int,\n      ?   location?: StringNullableFilter | String | Null,\n      ?   isVirtual?: BoolFilter | Boolean,\n      ?   meetingLink?: StringNullableFilter | String | Null,\n      ?   fee?: FloatNullableFilter | Float | Null,\n      ?   notes?: StringNullableFilter | String | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   patient?: UserRelationFilter | UserWhereInput,\n      ?   doctor?: UserRelationFilter | UserWhereInput,\n      ?   prescriptions?: PrescriptionListRelationFilter,\n      ?   labResults?: LabResultListRelationFilter,\n      ?   payments?: PaymentListRelationFilter\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nUnknown argument `tokenNumber`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"nurox-api","stack":"PrismaClientValidationError: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:555:59\n\n  552 endDate.setHours(23, 59, 59, 999);\n  553 \n  554 // Get all appointments for this doctor on this date\n→ 555 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc5tixws000iaxareufhgthr\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n          },\n          tokenNumber: {\n          ~~~~~~~~~~~\n            not: null\n          },\n      ?   AND?: AppointmentWhereInput | AppointmentWhereInput[],\n      ?   OR?: AppointmentWhereInput[],\n      ?   NOT?: AppointmentWhereInput | AppointmentWhereInput[],\n      ?   id?: StringFilter | String,\n      ?   patientId?: StringFilter | String,\n      ?   type?: EnumAppointmentTypeFilter | AppointmentType,\n      ?   title?: StringFilter | String,\n      ?   description?: StringNullableFilter | String | Null,\n      ?   duration?: IntFilter | Int,\n      ?   location?: StringNullableFilter | String | Null,\n      ?   isVirtual?: BoolFilter | Boolean,\n      ?   meetingLink?: StringNullableFilter | String | Null,\n      ?   fee?: FloatNullableFilter | Float | Null,\n      ?   notes?: StringNullableFilter | String | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   patient?: UserRelationFilter | UserWhereInput,\n      ?   doctor?: UserRelationFilter | UserWhereInput,\n      ?   prescriptions?: PrescriptionListRelationFilter,\n      ?   labResults?: LabResultListRelationFilter,\n      ?   payments?: PaymentListRelationFilter\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nUnknown argument `tokenNumber`. Available options are marked with ?.\n    at wn (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getTokenAvailability (/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:555:34)","timestamp":"2025-06-23 01:04:52"}
{"clientVersion":"5.22.0","level":"error","message":"Create appointment error: \nInvalid `prisma.appointment.findFirst()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:31:67\n\n  28 const nextDay = new Date(appointmentDateOnly);\n  29 nextDay.setDate(nextDay.getDate() + 1);\n  30 \n→ 31 const existingTokenAppointment = await prisma.appointment.findFirst({\n       where: {\n         doctorId: \"cmc5tixws000iaxareufhgthr\",\n         tokenNumber: 1,\n         ~~~~~~~~~~~\n         appointmentDate: {\n           gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n           lt: new Date(\"2025-06-23T18:30:00.000Z\")\n         },\n         status: {\n           not: \"CANCELLED\"\n         },\n     ?   AND?: AppointmentWhereInput | AppointmentWhereInput[],\n     ?   OR?: AppointmentWhereInput[],\n     ?   NOT?: AppointmentWhereInput | AppointmentWhereInput[],\n     ?   id?: StringFilter | String,\n     ?   patientId?: StringFilter | String,\n     ?   type?: EnumAppointmentTypeFilter | AppointmentType,\n     ?   title?: StringFilter | String,\n     ?   description?: StringNullableFilter | String | Null,\n     ?   duration?: IntFilter | Int,\n     ?   location?: StringNullableFilter | String | Null,\n     ?   isVirtual?: BoolFilter | Boolean,\n     ?   meetingLink?: StringNullableFilter | String | Null,\n     ?   fee?: FloatNullableFilter | Float | Null,\n     ?   notes?: StringNullableFilter | String | Null,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeFilter | DateTime,\n     ?   patient?: UserRelationFilter | UserWhereInput,\n     ?   doctor?: UserRelationFilter | UserWhereInput,\n     ?   prescriptions?: PrescriptionListRelationFilter,\n     ?   labResults?: LabResultListRelationFilter,\n     ?   payments?: PaymentListRelationFilter\n       }\n     })\n\nUnknown argument `tokenNumber`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"nurox-api","stack":"PrismaClientValidationError: \nInvalid `prisma.appointment.findFirst()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:31:67\n\n  28 const nextDay = new Date(appointmentDateOnly);\n  29 nextDay.setDate(nextDay.getDate() + 1);\n  30 \n→ 31 const existingTokenAppointment = await prisma.appointment.findFirst({\n       where: {\n         doctorId: \"cmc5tixws000iaxareufhgthr\",\n         tokenNumber: 1,\n         ~~~~~~~~~~~\n         appointmentDate: {\n           gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n           lt: new Date(\"2025-06-23T18:30:00.000Z\")\n         },\n         status: {\n           not: \"CANCELLED\"\n         },\n     ?   AND?: AppointmentWhereInput | AppointmentWhereInput[],\n     ?   OR?: AppointmentWhereInput[],\n     ?   NOT?: AppointmentWhereInput | AppointmentWhereInput[],\n     ?   id?: StringFilter | String,\n     ?   patientId?: StringFilter | String,\n     ?   type?: EnumAppointmentTypeFilter | AppointmentType,\n     ?   title?: StringFilter | String,\n     ?   description?: StringNullableFilter | String | Null,\n     ?   duration?: IntFilter | Int,\n     ?   location?: StringNullableFilter | String | Null,\n     ?   isVirtual?: BoolFilter | Boolean,\n     ?   meetingLink?: StringNullableFilter | String | Null,\n     ?   fee?: FloatNullableFilter | Float | Null,\n     ?   notes?: StringNullableFilter | String | Null,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeFilter | DateTime,\n     ?   patient?: UserRelationFilter | UserWhereInput,\n     ?   doctor?: UserRelationFilter | UserWhereInput,\n     ?   prescriptions?: PrescriptionListRelationFilter,\n     ?   labResults?: LabResultListRelationFilter,\n     ?   payments?: PaymentListRelationFilter\n       }\n     })\n\nUnknown argument `tokenNumber`. Available options are marked with ?.\n    at wn (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async createAppointment (/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:31:42)","timestamp":"2025-06-23 01:05:16"}
{"clientVersion":"5.22.0","level":"error","message":"Create appointment error: \nInvalid `prisma.appointment.findFirst()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:31:67\n\n  28 const nextDay = new Date(appointmentDateOnly);\n  29 nextDay.setDate(nextDay.getDate() + 1);\n  30 \n→ 31 const existingTokenAppointment = await prisma.appointment.findFirst({\n       where: {\n         doctorId: \"cmc5tixws000iaxareufhgthr\",\n         tokenNumber: 1,\n         ~~~~~~~~~~~\n         appointmentDate: {\n           gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n           lt: new Date(\"2025-06-23T18:30:00.000Z\")\n         },\n         status: {\n           not: \"CANCELLED\"\n         },\n     ?   AND?: AppointmentWhereInput | AppointmentWhereInput[],\n     ?   OR?: AppointmentWhereInput[],\n     ?   NOT?: AppointmentWhereInput | AppointmentWhereInput[],\n     ?   id?: StringFilter | String,\n     ?   patientId?: StringFilter | String,\n     ?   type?: EnumAppointmentTypeFilter | AppointmentType,\n     ?   title?: StringFilter | String,\n     ?   description?: StringNullableFilter | String | Null,\n     ?   duration?: IntFilter | Int,\n     ?   location?: StringNullableFilter | String | Null,\n     ?   isVirtual?: BoolFilter | Boolean,\n     ?   meetingLink?: StringNullableFilter | String | Null,\n     ?   fee?: FloatNullableFilter | Float | Null,\n     ?   notes?: StringNullableFilter | String | Null,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeFilter | DateTime,\n     ?   patient?: UserRelationFilter | UserWhereInput,\n     ?   doctor?: UserRelationFilter | UserWhereInput,\n     ?   prescriptions?: PrescriptionListRelationFilter,\n     ?   labResults?: LabResultListRelationFilter,\n     ?   payments?: PaymentListRelationFilter\n       }\n     })\n\nUnknown argument `tokenNumber`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"nurox-api","stack":"PrismaClientValidationError: \nInvalid `prisma.appointment.findFirst()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:31:67\n\n  28 const nextDay = new Date(appointmentDateOnly);\n  29 nextDay.setDate(nextDay.getDate() + 1);\n  30 \n→ 31 const existingTokenAppointment = await prisma.appointment.findFirst({\n       where: {\n         doctorId: \"cmc5tixws000iaxareufhgthr\",\n         tokenNumber: 1,\n         ~~~~~~~~~~~\n         appointmentDate: {\n           gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n           lt: new Date(\"2025-06-23T18:30:00.000Z\")\n         },\n         status: {\n           not: \"CANCELLED\"\n         },\n     ?   AND?: AppointmentWhereInput | AppointmentWhereInput[],\n     ?   OR?: AppointmentWhereInput[],\n     ?   NOT?: AppointmentWhereInput | AppointmentWhereInput[],\n     ?   id?: StringFilter | String,\n     ?   patientId?: StringFilter | String,\n     ?   type?: EnumAppointmentTypeFilter | AppointmentType,\n     ?   title?: StringFilter | String,\n     ?   description?: StringNullableFilter | String | Null,\n     ?   duration?: IntFilter | Int,\n     ?   location?: StringNullableFilter | String | Null,\n     ?   isVirtual?: BoolFilter | Boolean,\n     ?   meetingLink?: StringNullableFilter | String | Null,\n     ?   fee?: FloatNullableFilter | Float | Null,\n     ?   notes?: StringNullableFilter | String | Null,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeFilter | DateTime,\n     ?   patient?: UserRelationFilter | UserWhereInput,\n     ?   doctor?: UserRelationFilter | UserWhereInput,\n     ?   prescriptions?: PrescriptionListRelationFilter,\n     ?   labResults?: LabResultListRelationFilter,\n     ?   payments?: PaymentListRelationFilter\n       }\n     })\n\nUnknown argument `tokenNumber`. Available options are marked with ?.\n    at wn (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async createAppointment (/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:31:42)","timestamp":"2025-06-23 01:17:27"}
