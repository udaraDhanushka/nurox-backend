{"headers":{"access-control-allow-credentials":"true","access-control-allow-methods":"GET, HEAD, PUT, PATCH, POST, DELETE","access-control-allow-origin":"*","access-control-expose-headers":"Request-Id, Stripe-Manage-Version, Stripe-Should-Retry, X-Stripe-External-Auth-Required, X-Stripe-Privileged-Session-Required","access-control-max-age":"300","cache-control":"no-cache, no-store","connection":"keep-alive","content-length":"132","content-security-policy":"base-uri 'none'; default-src 'none'; form-action 'none'; frame-ancestors 'none'; img-src 'self'; script-src 'self' 'report-sample'; style-src 'self'; worker-src 'none'; upgrade-insecure-requests; report-uri https://q.stripe.com/csp-violation?q=u2b2hNNP1Gvoimz-S3QZQ5uTIUISnOvuV14L8FDx9zMp2oOYlAsGFXg54ka5uA9KCthreJnPGUyVubfw","content-type":"application/json","date":"Sun, 22 Jun 2025 05:06:39 GMT","server":"nginx","strict-transport-security":"max-age=63072000; includeSubDomains; preload","vary":"Origin","www-authenticate":"Bearer realm=\"Stripe\"","x-robots-tag":"none","x-wc":"ABHI"},"level":"error","message":"Create payment intent error: Invalid API Key provided: sk_test_******************-key","raw":{"headers":{"access-control-allow-credentials":"true","access-control-allow-methods":"GET, HEAD, PUT, PATCH, POST, DELETE","access-control-allow-origin":"*","access-control-expose-headers":"Request-Id, Stripe-Manage-Version, Stripe-Should-Retry, X-Stripe-External-Auth-Required, X-Stripe-Privileged-Session-Required","access-control-max-age":"300","cache-control":"no-cache, no-store","connection":"keep-alive","content-length":"132","content-security-policy":"base-uri 'none'; default-src 'none'; form-action 'none'; frame-ancestors 'none'; img-src 'self'; script-src 'self' 'report-sample'; style-src 'self'; worker-src 'none'; upgrade-insecure-requests; report-uri https://q.stripe.com/csp-violation?q=u2b2hNNP1Gvoimz-S3QZQ5uTIUISnOvuV14L8FDx9zMp2oOYlAsGFXg54ka5uA9KCthreJnPGUyVubfw","content-type":"application/json","date":"Sun, 22 Jun 2025 05:06:39 GMT","server":"nginx","strict-transport-security":"max-age=63072000; includeSubDomains; preload","vary":"Origin","www-authenticate":"Bearer realm=\"Stripe\"","x-robots-tag":"none","x-wc":"ABHI"},"message":"Invalid API Key provided: sk_test_******************-key","statusCode":401,"type":"invalid_request_error"},"rawType":"invalid_request_error","service":"nurox-api","stack":"Error: Invalid API Key provided: sk_test_******************-key\n    at res.toJSON.then.Error_js_1.StripeAPIError.message (/home/udara/Documents/CCCU/nurox-backend/node_modules/stripe/cjs/RequestSender.js:96:31)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-06-22 10:36:39","type":"StripeAuthenticationError"}
{"clientVersion":"5.22.0","level":"error","message":"Get token availability error: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:555:59\n\n  552 endDate.setHours(23, 59, 59, 999);\n  553 \n  554 // Get all appointments for this doctor on this date\n→ 555 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc5tixws000iaxareufhgthr\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n          },\n          tokenNumber: {\n          ~~~~~~~~~~~\n            not: null\n          },\n      ?   AND?: AppointmentWhereInput | AppointmentWhereInput[],\n      ?   OR?: AppointmentWhereInput[],\n      ?   NOT?: AppointmentWhereInput | AppointmentWhereInput[],\n      ?   id?: StringFilter | String,\n      ?   patientId?: StringFilter | String,\n      ?   type?: EnumAppointmentTypeFilter | AppointmentType,\n      ?   title?: StringFilter | String,\n      ?   description?: StringNullableFilter | String | Null,\n      ?   duration?: IntFilter | Int,\n      ?   location?: StringNullableFilter | String | Null,\n      ?   isVirtual?: BoolFilter | Boolean,\n      ?   meetingLink?: StringNullableFilter | String | Null,\n      ?   fee?: FloatNullableFilter | Float | Null,\n      ?   notes?: StringNullableFilter | String | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   patient?: UserRelationFilter | UserWhereInput,\n      ?   doctor?: UserRelationFilter | UserWhereInput,\n      ?   prescriptions?: PrescriptionListRelationFilter,\n      ?   labResults?: LabResultListRelationFilter,\n      ?   payments?: PaymentListRelationFilter\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nUnknown argument `tokenNumber`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"nurox-api","stack":"PrismaClientValidationError: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:555:59\n\n  552 endDate.setHours(23, 59, 59, 999);\n  553 \n  554 // Get all appointments for this doctor on this date\n→ 555 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc5tixws000iaxareufhgthr\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n          },\n          tokenNumber: {\n          ~~~~~~~~~~~\n            not: null\n          },\n      ?   AND?: AppointmentWhereInput | AppointmentWhereInput[],\n      ?   OR?: AppointmentWhereInput[],\n      ?   NOT?: AppointmentWhereInput | AppointmentWhereInput[],\n      ?   id?: StringFilter | String,\n      ?   patientId?: StringFilter | String,\n      ?   type?: EnumAppointmentTypeFilter | AppointmentType,\n      ?   title?: StringFilter | String,\n      ?   description?: StringNullableFilter | String | Null,\n      ?   duration?: IntFilter | Int,\n      ?   location?: StringNullableFilter | String | Null,\n      ?   isVirtual?: BoolFilter | Boolean,\n      ?   meetingLink?: StringNullableFilter | String | Null,\n      ?   fee?: FloatNullableFilter | Float | Null,\n      ?   notes?: StringNullableFilter | String | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   patient?: UserRelationFilter | UserWhereInput,\n      ?   doctor?: UserRelationFilter | UserWhereInput,\n      ?   prescriptions?: PrescriptionListRelationFilter,\n      ?   labResults?: LabResultListRelationFilter,\n      ?   payments?: PaymentListRelationFilter\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nUnknown argument `tokenNumber`. Available options are marked with ?.\n    at wn (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getTokenAvailability (/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:555:34)","timestamp":"2025-06-23 01:01:46"}
{"clientVersion":"5.22.0","level":"error","message":"Get token availability error: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:555:59\n\n  552 endDate.setHours(23, 59, 59, 999);\n  553 \n  554 // Get all appointments for this doctor on this date\n→ 555 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc5tixws000iaxareufhgthr\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n          },\n          tokenNumber: {\n          ~~~~~~~~~~~\n            not: null\n          },\n      ?   AND?: AppointmentWhereInput | AppointmentWhereInput[],\n      ?   OR?: AppointmentWhereInput[],\n      ?   NOT?: AppointmentWhereInput | AppointmentWhereInput[],\n      ?   id?: StringFilter | String,\n      ?   patientId?: StringFilter | String,\n      ?   type?: EnumAppointmentTypeFilter | AppointmentType,\n      ?   title?: StringFilter | String,\n      ?   description?: StringNullableFilter | String | Null,\n      ?   duration?: IntFilter | Int,\n      ?   location?: StringNullableFilter | String | Null,\n      ?   isVirtual?: BoolFilter | Boolean,\n      ?   meetingLink?: StringNullableFilter | String | Null,\n      ?   fee?: FloatNullableFilter | Float | Null,\n      ?   notes?: StringNullableFilter | String | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   patient?: UserRelationFilter | UserWhereInput,\n      ?   doctor?: UserRelationFilter | UserWhereInput,\n      ?   prescriptions?: PrescriptionListRelationFilter,\n      ?   labResults?: LabResultListRelationFilter,\n      ?   payments?: PaymentListRelationFilter\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nUnknown argument `tokenNumber`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"nurox-api","stack":"PrismaClientValidationError: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:555:59\n\n  552 endDate.setHours(23, 59, 59, 999);\n  553 \n  554 // Get all appointments for this doctor on this date\n→ 555 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc5tixws000iaxareufhgthr\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n          },\n          tokenNumber: {\n          ~~~~~~~~~~~\n            not: null\n          },\n      ?   AND?: AppointmentWhereInput | AppointmentWhereInput[],\n      ?   OR?: AppointmentWhereInput[],\n      ?   NOT?: AppointmentWhereInput | AppointmentWhereInput[],\n      ?   id?: StringFilter | String,\n      ?   patientId?: StringFilter | String,\n      ?   type?: EnumAppointmentTypeFilter | AppointmentType,\n      ?   title?: StringFilter | String,\n      ?   description?: StringNullableFilter | String | Null,\n      ?   duration?: IntFilter | Int,\n      ?   location?: StringNullableFilter | String | Null,\n      ?   isVirtual?: BoolFilter | Boolean,\n      ?   meetingLink?: StringNullableFilter | String | Null,\n      ?   fee?: FloatNullableFilter | Float | Null,\n      ?   notes?: StringNullableFilter | String | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   patient?: UserRelationFilter | UserWhereInput,\n      ?   doctor?: UserRelationFilter | UserWhereInput,\n      ?   prescriptions?: PrescriptionListRelationFilter,\n      ?   labResults?: LabResultListRelationFilter,\n      ?   payments?: PaymentListRelationFilter\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nUnknown argument `tokenNumber`. Available options are marked with ?.\n    at wn (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getTokenAvailability (/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:555:34)","timestamp":"2025-06-23 01:03:35"}
{"clientVersion":"5.22.0","level":"error","message":"Get token availability error: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:555:59\n\n  552 endDate.setHours(23, 59, 59, 999);\n  553 \n  554 // Get all appointments for this doctor on this date\n→ 555 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc5tixws000iaxareufhgthr\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n          },\n          tokenNumber: {\n          ~~~~~~~~~~~\n            not: null\n          },\n      ?   AND?: AppointmentWhereInput | AppointmentWhereInput[],\n      ?   OR?: AppointmentWhereInput[],\n      ?   NOT?: AppointmentWhereInput | AppointmentWhereInput[],\n      ?   id?: StringFilter | String,\n      ?   patientId?: StringFilter | String,\n      ?   type?: EnumAppointmentTypeFilter | AppointmentType,\n      ?   title?: StringFilter | String,\n      ?   description?: StringNullableFilter | String | Null,\n      ?   duration?: IntFilter | Int,\n      ?   location?: StringNullableFilter | String | Null,\n      ?   isVirtual?: BoolFilter | Boolean,\n      ?   meetingLink?: StringNullableFilter | String | Null,\n      ?   fee?: FloatNullableFilter | Float | Null,\n      ?   notes?: StringNullableFilter | String | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   patient?: UserRelationFilter | UserWhereInput,\n      ?   doctor?: UserRelationFilter | UserWhereInput,\n      ?   prescriptions?: PrescriptionListRelationFilter,\n      ?   labResults?: LabResultListRelationFilter,\n      ?   payments?: PaymentListRelationFilter\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nUnknown argument `tokenNumber`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"nurox-api","stack":"PrismaClientValidationError: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:555:59\n\n  552 endDate.setHours(23, 59, 59, 999);\n  553 \n  554 // Get all appointments for this doctor on this date\n→ 555 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc5tixws000iaxareufhgthr\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n          },\n          tokenNumber: {\n          ~~~~~~~~~~~\n            not: null\n          },\n      ?   AND?: AppointmentWhereInput | AppointmentWhereInput[],\n      ?   OR?: AppointmentWhereInput[],\n      ?   NOT?: AppointmentWhereInput | AppointmentWhereInput[],\n      ?   id?: StringFilter | String,\n      ?   patientId?: StringFilter | String,\n      ?   type?: EnumAppointmentTypeFilter | AppointmentType,\n      ?   title?: StringFilter | String,\n      ?   description?: StringNullableFilter | String | Null,\n      ?   duration?: IntFilter | Int,\n      ?   location?: StringNullableFilter | String | Null,\n      ?   isVirtual?: BoolFilter | Boolean,\n      ?   meetingLink?: StringNullableFilter | String | Null,\n      ?   fee?: FloatNullableFilter | Float | Null,\n      ?   notes?: StringNullableFilter | String | Null,\n      ?   createdAt?: DateTimeFilter | DateTime,\n      ?   updatedAt?: DateTimeFilter | DateTime,\n      ?   patient?: UserRelationFilter | UserWhereInput,\n      ?   doctor?: UserRelationFilter | UserWhereInput,\n      ?   prescriptions?: PrescriptionListRelationFilter,\n      ?   labResults?: LabResultListRelationFilter,\n      ?   payments?: PaymentListRelationFilter\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nUnknown argument `tokenNumber`. Available options are marked with ?.\n    at wn (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getTokenAvailability (/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:555:34)","timestamp":"2025-06-23 01:04:52"}
{"clientVersion":"5.22.0","level":"error","message":"Create appointment error: \nInvalid `prisma.appointment.findFirst()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:31:67\n\n  28 const nextDay = new Date(appointmentDateOnly);\n  29 nextDay.setDate(nextDay.getDate() + 1);\n  30 \n→ 31 const existingTokenAppointment = await prisma.appointment.findFirst({\n       where: {\n         doctorId: \"cmc5tixws000iaxareufhgthr\",\n         tokenNumber: 1,\n         ~~~~~~~~~~~\n         appointmentDate: {\n           gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n           lt: new Date(\"2025-06-23T18:30:00.000Z\")\n         },\n         status: {\n           not: \"CANCELLED\"\n         },\n     ?   AND?: AppointmentWhereInput | AppointmentWhereInput[],\n     ?   OR?: AppointmentWhereInput[],\n     ?   NOT?: AppointmentWhereInput | AppointmentWhereInput[],\n     ?   id?: StringFilter | String,\n     ?   patientId?: StringFilter | String,\n     ?   type?: EnumAppointmentTypeFilter | AppointmentType,\n     ?   title?: StringFilter | String,\n     ?   description?: StringNullableFilter | String | Null,\n     ?   duration?: IntFilter | Int,\n     ?   location?: StringNullableFilter | String | Null,\n     ?   isVirtual?: BoolFilter | Boolean,\n     ?   meetingLink?: StringNullableFilter | String | Null,\n     ?   fee?: FloatNullableFilter | Float | Null,\n     ?   notes?: StringNullableFilter | String | Null,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeFilter | DateTime,\n     ?   patient?: UserRelationFilter | UserWhereInput,\n     ?   doctor?: UserRelationFilter | UserWhereInput,\n     ?   prescriptions?: PrescriptionListRelationFilter,\n     ?   labResults?: LabResultListRelationFilter,\n     ?   payments?: PaymentListRelationFilter\n       }\n     })\n\nUnknown argument `tokenNumber`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"nurox-api","stack":"PrismaClientValidationError: \nInvalid `prisma.appointment.findFirst()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:31:67\n\n  28 const nextDay = new Date(appointmentDateOnly);\n  29 nextDay.setDate(nextDay.getDate() + 1);\n  30 \n→ 31 const existingTokenAppointment = await prisma.appointment.findFirst({\n       where: {\n         doctorId: \"cmc5tixws000iaxareufhgthr\",\n         tokenNumber: 1,\n         ~~~~~~~~~~~\n         appointmentDate: {\n           gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n           lt: new Date(\"2025-06-23T18:30:00.000Z\")\n         },\n         status: {\n           not: \"CANCELLED\"\n         },\n     ?   AND?: AppointmentWhereInput | AppointmentWhereInput[],\n     ?   OR?: AppointmentWhereInput[],\n     ?   NOT?: AppointmentWhereInput | AppointmentWhereInput[],\n     ?   id?: StringFilter | String,\n     ?   patientId?: StringFilter | String,\n     ?   type?: EnumAppointmentTypeFilter | AppointmentType,\n     ?   title?: StringFilter | String,\n     ?   description?: StringNullableFilter | String | Null,\n     ?   duration?: IntFilter | Int,\n     ?   location?: StringNullableFilter | String | Null,\n     ?   isVirtual?: BoolFilter | Boolean,\n     ?   meetingLink?: StringNullableFilter | String | Null,\n     ?   fee?: FloatNullableFilter | Float | Null,\n     ?   notes?: StringNullableFilter | String | Null,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeFilter | DateTime,\n     ?   patient?: UserRelationFilter | UserWhereInput,\n     ?   doctor?: UserRelationFilter | UserWhereInput,\n     ?   prescriptions?: PrescriptionListRelationFilter,\n     ?   labResults?: LabResultListRelationFilter,\n     ?   payments?: PaymentListRelationFilter\n       }\n     })\n\nUnknown argument `tokenNumber`. Available options are marked with ?.\n    at wn (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async createAppointment (/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:31:42)","timestamp":"2025-06-23 01:05:16"}
{"clientVersion":"5.22.0","level":"error","message":"Create appointment error: \nInvalid `prisma.appointment.findFirst()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:31:67\n\n  28 const nextDay = new Date(appointmentDateOnly);\n  29 nextDay.setDate(nextDay.getDate() + 1);\n  30 \n→ 31 const existingTokenAppointment = await prisma.appointment.findFirst({\n       where: {\n         doctorId: \"cmc5tixws000iaxareufhgthr\",\n         tokenNumber: 1,\n         ~~~~~~~~~~~\n         appointmentDate: {\n           gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n           lt: new Date(\"2025-06-23T18:30:00.000Z\")\n         },\n         status: {\n           not: \"CANCELLED\"\n         },\n     ?   AND?: AppointmentWhereInput | AppointmentWhereInput[],\n     ?   OR?: AppointmentWhereInput[],\n     ?   NOT?: AppointmentWhereInput | AppointmentWhereInput[],\n     ?   id?: StringFilter | String,\n     ?   patientId?: StringFilter | String,\n     ?   type?: EnumAppointmentTypeFilter | AppointmentType,\n     ?   title?: StringFilter | String,\n     ?   description?: StringNullableFilter | String | Null,\n     ?   duration?: IntFilter | Int,\n     ?   location?: StringNullableFilter | String | Null,\n     ?   isVirtual?: BoolFilter | Boolean,\n     ?   meetingLink?: StringNullableFilter | String | Null,\n     ?   fee?: FloatNullableFilter | Float | Null,\n     ?   notes?: StringNullableFilter | String | Null,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeFilter | DateTime,\n     ?   patient?: UserRelationFilter | UserWhereInput,\n     ?   doctor?: UserRelationFilter | UserWhereInput,\n     ?   prescriptions?: PrescriptionListRelationFilter,\n     ?   labResults?: LabResultListRelationFilter,\n     ?   payments?: PaymentListRelationFilter\n       }\n     })\n\nUnknown argument `tokenNumber`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"nurox-api","stack":"PrismaClientValidationError: \nInvalid `prisma.appointment.findFirst()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:31:67\n\n  28 const nextDay = new Date(appointmentDateOnly);\n  29 nextDay.setDate(nextDay.getDate() + 1);\n  30 \n→ 31 const existingTokenAppointment = await prisma.appointment.findFirst({\n       where: {\n         doctorId: \"cmc5tixws000iaxareufhgthr\",\n         tokenNumber: 1,\n         ~~~~~~~~~~~\n         appointmentDate: {\n           gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n           lt: new Date(\"2025-06-23T18:30:00.000Z\")\n         },\n         status: {\n           not: \"CANCELLED\"\n         },\n     ?   AND?: AppointmentWhereInput | AppointmentWhereInput[],\n     ?   OR?: AppointmentWhereInput[],\n     ?   NOT?: AppointmentWhereInput | AppointmentWhereInput[],\n     ?   id?: StringFilter | String,\n     ?   patientId?: StringFilter | String,\n     ?   type?: EnumAppointmentTypeFilter | AppointmentType,\n     ?   title?: StringFilter | String,\n     ?   description?: StringNullableFilter | String | Null,\n     ?   duration?: IntFilter | Int,\n     ?   location?: StringNullableFilter | String | Null,\n     ?   isVirtual?: BoolFilter | Boolean,\n     ?   meetingLink?: StringNullableFilter | String | Null,\n     ?   fee?: FloatNullableFilter | Float | Null,\n     ?   notes?: StringNullableFilter | String | Null,\n     ?   createdAt?: DateTimeFilter | DateTime,\n     ?   updatedAt?: DateTimeFilter | DateTime,\n     ?   patient?: UserRelationFilter | UserWhereInput,\n     ?   doctor?: UserRelationFilter | UserWhereInput,\n     ?   prescriptions?: PrescriptionListRelationFilter,\n     ?   labResults?: LabResultListRelationFilter,\n     ?   payments?: PaymentListRelationFilter\n       }\n     })\n\nUnknown argument `tokenNumber`. Available options are marked with ?.\n    at wn (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async createAppointment (/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:31:42)","timestamp":"2025-06-23 01:17:27"}
{"clientVersion":"5.22.0","level":"error","message":"Get token availability error: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:59\n\n  554 endDate.setHours(23, 59, 59, 999);\n  555 \n  556 // Get all appointments for this doctor on this date\n→ 557 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"1\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n                 ~~~~~~~~~~~\n          },\n          tokenNumber: {\n            not: null\n          }\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nInvalid value for argument `not`. Expected AppointmentStatus.","name":"PrismaClientValidationError","service":"nurox-api","stack":"PrismaClientValidationError: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:59\n\n  554 endDate.setHours(23, 59, 59, 999);\n  555 \n  556 // Get all appointments for this doctor on this date\n→ 557 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"1\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n                 ~~~~~~~~~~~\n          },\n          tokenNumber: {\n            not: null\n          }\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nInvalid value for argument `not`. Expected AppointmentStatus.\n    at wn (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getTokenAvailability (/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:34)","timestamp":"2025-06-23 09:34:46"}
{"clientVersion":"5.22.0","level":"error","message":"Get token availability error: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:59\n\n  554 endDate.setHours(23, 59, 59, 999);\n  555 \n  556 // Get all appointments for this doctor on this date\n→ 557 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc8m1rp300042duuvcg6igiq\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n                 ~~~~~~~~~~~\n          },\n          tokenNumber: {\n            not: null\n          }\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nInvalid value for argument `not`. Expected AppointmentStatus.","name":"PrismaClientValidationError","service":"nurox-api","stack":"PrismaClientValidationError: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:59\n\n  554 endDate.setHours(23, 59, 59, 999);\n  555 \n  556 // Get all appointments for this doctor on this date\n→ 557 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc8m1rp300042duuvcg6igiq\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n                 ~~~~~~~~~~~\n          },\n          tokenNumber: {\n            not: null\n          }\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nInvalid value for argument `not`. Expected AppointmentStatus.\n    at wn (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getTokenAvailability (/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:34)","timestamp":"2025-06-23 16:24:35"}
{"clientVersion":"5.22.0","level":"error","message":"Create appointment error: \nInvalid `prisma.appointment.findFirst()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:31:67\n\n  28 const nextDay = new Date(appointmentDateOnly);\n  29 nextDay.setDate(nextDay.getDate() + 1);\n  30 \n→ 31 const existingTokenAppointment = await prisma.appointment.findFirst({\n       where: {\n         doctorId: \"cmc8m1rp300042duuvcg6igiq\",\n         tokenNumber: 1,\n         appointmentDate: {\n           gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n           lt: new Date(\"2025-06-23T18:30:00.000Z\")\n         },\n         status: {\n           not: \"CANCELLED\"\n                ~~~~~~~~~~~\n         }\n       }\n     })\n\nInvalid value for argument `not`. Expected AppointmentStatus.","name":"PrismaClientValidationError","service":"nurox-api","stack":"PrismaClientValidationError: \nInvalid `prisma.appointment.findFirst()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:31:67\n\n  28 const nextDay = new Date(appointmentDateOnly);\n  29 nextDay.setDate(nextDay.getDate() + 1);\n  30 \n→ 31 const existingTokenAppointment = await prisma.appointment.findFirst({\n       where: {\n         doctorId: \"cmc8m1rp300042duuvcg6igiq\",\n         tokenNumber: 1,\n         appointmentDate: {\n           gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n           lt: new Date(\"2025-06-23T18:30:00.000Z\")\n         },\n         status: {\n           not: \"CANCELLED\"\n                ~~~~~~~~~~~\n         }\n       }\n     })\n\nInvalid value for argument `not`. Expected AppointmentStatus.\n    at wn (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async createAppointment (/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:31:42)","timestamp":"2025-06-23 16:25:53"}
{"clientVersion":"5.22.0","level":"error","message":"Create appointment error: \nInvalid `prisma.appointment.findFirst()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:31:67\n\n  28 const nextDay = new Date(appointmentDateOnly);\n  29 nextDay.setDate(nextDay.getDate() + 1);\n  30 \n→ 31 const existingTokenAppointment = await prisma.appointment.findFirst({\n       where: {\n         doctorId: \"cmc8m1rp300042duuvcg6igiq\",\n         tokenNumber: 1,\n         appointmentDate: {\n           gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n           lt: new Date(\"2025-06-23T18:30:00.000Z\")\n         },\n         status: {\n           not: \"CANCELLED\"\n                ~~~~~~~~~~~\n         }\n       }\n     })\n\nInvalid value for argument `not`. Expected AppointmentStatus.","name":"PrismaClientValidationError","service":"nurox-api","stack":"PrismaClientValidationError: \nInvalid `prisma.appointment.findFirst()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:31:67\n\n  28 const nextDay = new Date(appointmentDateOnly);\n  29 nextDay.setDate(nextDay.getDate() + 1);\n  30 \n→ 31 const existingTokenAppointment = await prisma.appointment.findFirst({\n       where: {\n         doctorId: \"cmc8m1rp300042duuvcg6igiq\",\n         tokenNumber: 1,\n         appointmentDate: {\n           gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n           lt: new Date(\"2025-06-23T18:30:00.000Z\")\n         },\n         status: {\n           not: \"CANCELLED\"\n                ~~~~~~~~~~~\n         }\n       }\n     })\n\nInvalid value for argument `not`. Expected AppointmentStatus.\n    at wn (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async createAppointment (/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:31:42)","timestamp":"2025-06-23 16:26:34"}
{"clientVersion":"5.22.0","level":"error","message":"Get token availability error: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:59\n\n  554 endDate.setHours(23, 59, 59, 999);\n  555 \n  556 // Get all appointments for this doctor on this date\n→ 557 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc8m1rp300042duuvcg6igiq\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n                 ~~~~~~~~~~~\n          },\n          tokenNumber: {\n            not: null\n          }\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nInvalid value for argument `not`. Expected AppointmentStatus.","name":"PrismaClientValidationError","service":"nurox-api","stack":"PrismaClientValidationError: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:59\n\n  554 endDate.setHours(23, 59, 59, 999);\n  555 \n  556 // Get all appointments for this doctor on this date\n→ 557 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc8m1rp300042duuvcg6igiq\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n                 ~~~~~~~~~~~\n          },\n          tokenNumber: {\n            not: null\n          }\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nInvalid value for argument `not`. Expected AppointmentStatus.\n    at wn (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getTokenAvailability (/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:34)","timestamp":"2025-06-23 16:31:56"}
{"clientVersion":"5.22.0","level":"error","message":"Get token availability error: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:59\n\n  554 endDate.setHours(23, 59, 59, 999);\n  555 \n  556 // Get all appointments for this doctor on this date\n→ 557 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc8ylx6x0000c80p4r7o6kzy\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n                 ~~~~~~~~~~~\n          },\n          tokenNumber: {\n            not: null\n          }\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nInvalid value for argument `not`. Expected AppointmentStatus.","name":"PrismaClientValidationError","service":"nurox-api","stack":"PrismaClientValidationError: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:59\n\n  554 endDate.setHours(23, 59, 59, 999);\n  555 \n  556 // Get all appointments for this doctor on this date\n→ 557 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc8ylx6x0000c80p4r7o6kzy\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n                 ~~~~~~~~~~~\n          },\n          tokenNumber: {\n            not: null\n          }\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nInvalid value for argument `not`. Expected AppointmentStatus.\n    at wn (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getTokenAvailability (/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:34)","timestamp":"2025-06-23 16:36:13"}
{"clientVersion":"5.22.0","level":"error","message":"Get token availability error: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:59\n\n  554 endDate.setHours(23, 59, 59, 999);\n  555 \n  556 // Get all appointments for this doctor on this date\n→ 557 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc8ylx6x0000c80p4r7o6kzy\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n                 ~~~~~~~~~~~\n          },\n          tokenNumber: {\n            not: null\n          }\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nInvalid value for argument `not`. Expected AppointmentStatus.","name":"PrismaClientValidationError","service":"nurox-api","stack":"PrismaClientValidationError: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:59\n\n  554 endDate.setHours(23, 59, 59, 999);\n  555 \n  556 // Get all appointments for this doctor on this date\n→ 557 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc8ylx6x0000c80p4r7o6kzy\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n                 ~~~~~~~~~~~\n          },\n          tokenNumber: {\n            not: null\n          }\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nInvalid value for argument `not`. Expected AppointmentStatus.\n    at wn (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getTokenAvailability (/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:34)","timestamp":"2025-06-23 16:41:44"}
{"clientVersion":"5.22.0","level":"error","message":"Get token availability error: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:59\n\n  554 endDate.setHours(23, 59, 59, 999);\n  555 \n  556 // Get all appointments for this doctor on this date\n→ 557 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc8ylx6x0000c80p4r7o6kzy\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n                 ~~~~~~~~~~~\n          },\n          tokenNumber: {\n            not: null\n          }\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nInvalid value for argument `not`. Expected AppointmentStatus.","name":"PrismaClientValidationError","service":"nurox-api","stack":"PrismaClientValidationError: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:59\n\n  554 endDate.setHours(23, 59, 59, 999);\n  555 \n  556 // Get all appointments for this doctor on this date\n→ 557 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc8ylx6x0000c80p4r7o6kzy\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n                 ~~~~~~~~~~~\n          },\n          tokenNumber: {\n            not: null\n          }\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nInvalid value for argument `not`. Expected AppointmentStatus.\n    at wn (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getTokenAvailability (/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:34)","timestamp":"2025-06-23 16:46:57"}
{"level":"error","message":"Token refresh error: Invalid refresh token","service":"nurox-api","stack":"Error: Invalid refresh token\n    at refreshAccessToken (/home/udara/Documents/CCCU/nurox-backend/src/utils/generateToken.js:97:11)\n    at async refreshToken (/home/udara/Documents/CCCU/nurox-backend/src/controllers/authController.js:225:22)","timestamp":"2025-06-23 23:05:35"}
{"clientVersion":"5.22.0","code":"P1001","level":"error","message":"Get appointments error: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:155:28\n\n  152 }\n  153 \n  154 const [appointments, total] = await Promise.all([\n→ 155   prisma.appointment.findMany(\nCan't reach database server at `db.dksvomenfhqajbatyyvc.supabase.co:5432`\n\nPlease make sure your database server is running at `db.dksvomenfhqajbatyyvc.supabase.co:5432`.","meta":{"database_host":"db.dksvomenfhqajbatyyvc.supabase.co","database_port":5432,"modelName":"Appointment"},"name":"PrismaClientKnownRequestError","service":"nurox-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:155:28\n\n  152 }\n  153 \n  154 const [appointments, total] = await Promise.all([\n→ 155   prisma.appointment.findMany(\nCan't reach database server at `db.dksvomenfhqajbatyyvc.supabase.co:5432`\n\nPlease make sure your database server is running at `db.dksvomenfhqajbatyyvc.supabase.co:5432`.\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:7315)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async Promise.all (index 0)\n    at async getAppointments (/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:154:37)","timestamp":"2025-06-23 23:06:06"}
{"clientVersion":"5.22.0","level":"error","message":"Get token availability error: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:59\n\n  554 endDate.setHours(23, 59, 59, 999);\n  555 \n  556 // Get all appointments for this doctor on this date\n→ 557 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc8m1rp300042duuvcg6igiq\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n                 ~~~~~~~~~~~\n          },\n          tokenNumber: {\n            not: null\n          }\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nInvalid value for argument `not`. Expected AppointmentStatus.","name":"PrismaClientValidationError","service":"nurox-api","stack":"PrismaClientValidationError: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:59\n\n  554 endDate.setHours(23, 59, 59, 999);\n  555 \n  556 // Get all appointments for this doctor on this date\n→ 557 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc8m1rp300042duuvcg6igiq\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n                 ~~~~~~~~~~~\n          },\n          tokenNumber: {\n            not: null\n          }\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nInvalid value for argument `not`. Expected AppointmentStatus.\n    at wn (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getTokenAvailability (/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:34)","timestamp":"2025-06-23 23:06:53"}
{"clientVersion":"5.22.0","level":"error","message":"Get token availability error: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:59\n\n  554 endDate.setHours(23, 59, 59, 999);\n  555 \n  556 // Get all appointments for this doctor on this date\n→ 557 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc8m1rp300042duuvcg6igiq\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-23T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-24T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n                 ~~~~~~~~~~~\n          },\n          tokenNumber: {\n            not: null\n          }\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nInvalid value for argument `not`. Expected AppointmentStatus.","name":"PrismaClientValidationError","service":"nurox-api","stack":"PrismaClientValidationError: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:59\n\n  554 endDate.setHours(23, 59, 59, 999);\n  555 \n  556 // Get all appointments for this doctor on this date\n→ 557 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc8m1rp300042duuvcg6igiq\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-23T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-24T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n                 ~~~~~~~~~~~\n          },\n          tokenNumber: {\n            not: null\n          }\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nInvalid value for argument `not`. Expected AppointmentStatus.\n    at wn (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getTokenAvailability (/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:34)","timestamp":"2025-06-23 23:07:08"}
{"clientVersion":"5.22.0","level":"error","message":"Create appointment error: \nInvalid `prisma.appointment.findFirst()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:31:67\n\n  28 const nextDay = new Date(appointmentDateOnly);\n  29 nextDay.setDate(nextDay.getDate() + 1);\n  30 \n→ 31 const existingTokenAppointment = await prisma.appointment.findFirst({\n       where: {\n         doctorId: \"cmc8m1rp300042duuvcg6igiq\",\n         tokenNumber: 1,\n         appointmentDate: {\n           gte: new Date(\"2025-06-23T18:30:00.000Z\"),\n           lt: new Date(\"2025-06-24T18:30:00.000Z\")\n         },\n         status: {\n           not: \"CANCELLED\"\n                ~~~~~~~~~~~\n         }\n       }\n     })\n\nInvalid value for argument `not`. Expected AppointmentStatus.","name":"PrismaClientValidationError","service":"nurox-api","stack":"PrismaClientValidationError: \nInvalid `prisma.appointment.findFirst()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:31:67\n\n  28 const nextDay = new Date(appointmentDateOnly);\n  29 nextDay.setDate(nextDay.getDate() + 1);\n  30 \n→ 31 const existingTokenAppointment = await prisma.appointment.findFirst({\n       where: {\n         doctorId: \"cmc8m1rp300042duuvcg6igiq\",\n         tokenNumber: 1,\n         appointmentDate: {\n           gte: new Date(\"2025-06-23T18:30:00.000Z\"),\n           lt: new Date(\"2025-06-24T18:30:00.000Z\")\n         },\n         status: {\n           not: \"CANCELLED\"\n                ~~~~~~~~~~~\n         }\n       }\n     })\n\nInvalid value for argument `not`. Expected AppointmentStatus.\n    at wn (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async createAppointment (/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:31:42)","timestamp":"2025-06-23 23:07:58"}
{"level":"error","message":"Token refresh error: Invalid refresh token","service":"nurox-api","stack":"Error: Invalid refresh token\n    at refreshAccessToken (/home/udara/Documents/CCCU/nurox-backend/src/utils/generateToken.js:97:11)\n    at async refreshToken (/home/udara/Documents/CCCU/nurox-backend/src/controllers/authController.js:225:22)","timestamp":"2025-06-23 23:19:30"}
{"level":"error","message":"Token refresh error: Invalid refresh token","service":"nurox-api","stack":"Error: Invalid refresh token\n    at refreshAccessToken (/home/udara/Documents/CCCU/nurox-backend/src/utils/generateToken.js:97:11)\n    at async refreshToken (/home/udara/Documents/CCCU/nurox-backend/src/controllers/authController.js:225:22)","timestamp":"2025-06-23 23:19:30"}
{"level":"error","message":"Token refresh error: Invalid refresh token","service":"nurox-api","stack":"Error: Invalid refresh token\n    at refreshAccessToken (/home/udara/Documents/CCCU/nurox-backend/src/utils/generateToken.js:97:11)\n    at async refreshToken (/home/udara/Documents/CCCU/nurox-backend/src/controllers/authController.js:225:22)","timestamp":"2025-06-23 23:19:30"}
{"clientVersion":"5.22.0","level":"error","message":"Get token availability error: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:59\n\n  554 endDate.setHours(23, 59, 59, 999);\n  555 \n  556 // Get all appointments for this doctor on this date\n→ 557 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc8ylx6x0000c80p4r7o6kzy\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n                 ~~~~~~~~~~~\n          },\n          tokenNumber: {\n            not: null\n          }\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nInvalid value for argument `not`. Expected AppointmentStatus.","name":"PrismaClientValidationError","service":"nurox-api","stack":"PrismaClientValidationError: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:59\n\n  554 endDate.setHours(23, 59, 59, 999);\n  555 \n  556 // Get all appointments for this doctor on this date\n→ 557 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc8ylx6x0000c80p4r7o6kzy\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n                 ~~~~~~~~~~~\n          },\n          tokenNumber: {\n            not: null\n          }\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nInvalid value for argument `not`. Expected AppointmentStatus.\n    at wn (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getTokenAvailability (/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:34)","timestamp":"2025-06-23 23:40:03"}
{"clientVersion":"5.22.0","level":"error","message":"Get token availability error: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:59\n\n  554 endDate.setHours(23, 59, 59, 999);\n  555 \n  556 // Get all appointments for this doctor on this date\n→ 557 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc8ylx6x0000c80p4r7o6kzy\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n                 ~~~~~~~~~~~\n          },\n          tokenNumber: {\n            not: null\n          }\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nInvalid value for argument `not`. Expected AppointmentStatus.","name":"PrismaClientValidationError","service":"nurox-api","stack":"PrismaClientValidationError: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:59\n\n  554 endDate.setHours(23, 59, 59, 999);\n  555 \n  556 // Get all appointments for this doctor on this date\n→ 557 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc8ylx6x0000c80p4r7o6kzy\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n                 ~~~~~~~~~~~\n          },\n          tokenNumber: {\n            not: null\n          }\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nInvalid value for argument `not`. Expected AppointmentStatus.\n    at wn (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getTokenAvailability (/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:34)","timestamp":"2025-06-23 23:41:39"}
{"clientVersion":"5.22.0","level":"error","message":"Get token availability error: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:59\n\n  554 endDate.setHours(23, 59, 59, 999);\n  555 \n  556 // Get all appointments for this doctor on this date\n→ 557 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc8ylx6x0000c80p4r7o6kzy\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-23T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-24T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n                 ~~~~~~~~~~~\n          },\n          tokenNumber: {\n            not: null\n          }\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nInvalid value for argument `not`. Expected AppointmentStatus.","name":"PrismaClientValidationError","service":"nurox-api","stack":"PrismaClientValidationError: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:59\n\n  554 endDate.setHours(23, 59, 59, 999);\n  555 \n  556 // Get all appointments for this doctor on this date\n→ 557 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc8ylx6x0000c80p4r7o6kzy\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-23T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-24T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n                 ~~~~~~~~~~~\n          },\n          tokenNumber: {\n            not: null\n          }\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nInvalid value for argument `not`. Expected AppointmentStatus.\n    at wn (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getTokenAvailability (/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:34)","timestamp":"2025-06-23 23:42:26"}
{"clientVersion":"5.22.0","level":"error","message":"Get token availability error: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:59\n\n  554 endDate.setHours(23, 59, 59, 999);\n  555 \n  556 // Get all appointments for this doctor on this date\n→ 557 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc8ylx6x0000c80p4r7o6kzy\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-23T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-24T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n                 ~~~~~~~~~~~\n          },\n          tokenNumber: {\n            not: null\n          }\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nInvalid value for argument `not`. Expected AppointmentStatus.","name":"PrismaClientValidationError","service":"nurox-api","stack":"PrismaClientValidationError: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:59\n\n  554 endDate.setHours(23, 59, 59, 999);\n  555 \n  556 // Get all appointments for this doctor on this date\n→ 557 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc8ylx6x0000c80p4r7o6kzy\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-23T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-24T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n                 ~~~~~~~~~~~\n          },\n          tokenNumber: {\n            not: null\n          }\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nInvalid value for argument `not`. Expected AppointmentStatus.\n    at wn (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getTokenAvailability (/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:34)","timestamp":"2025-06-23 23:54:42"}
{"clientVersion":"5.22.0","level":"error","message":"Get token availability error: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:59\n\n  554 endDate.setHours(23, 59, 59, 999);\n  555 \n  556 // Get all appointments for this doctor on this date\n→ 557 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc8ylx6x0000c80p4r7o6kzy\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n                 ~~~~~~~~~~~\n          },\n          tokenNumber: {\n            not: null\n          }\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nInvalid value for argument `not`. Expected AppointmentStatus.","name":"PrismaClientValidationError","service":"nurox-api","stack":"PrismaClientValidationError: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:59\n\n  554 endDate.setHours(23, 59, 59, 999);\n  555 \n  556 // Get all appointments for this doctor on this date\n→ 557 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc8ylx6x0000c80p4r7o6kzy\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n                 ~~~~~~~~~~~\n          },\n          tokenNumber: {\n            not: null\n          }\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nInvalid value for argument `not`. Expected AppointmentStatus.\n    at wn (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getTokenAvailability (/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:34)","timestamp":"2025-06-23 23:58:37"}
{"clientVersion":"5.22.0","level":"error","message":"Get token availability error: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:59\n\n  554 endDate.setHours(23, 59, 59, 999);\n  555 \n  556 // Get all appointments for this doctor on this date\n→ 557 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc8ylx6x0000c80p4r7o6kzy\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n                 ~~~~~~~~~~~\n          },\n          tokenNumber: {\n            not: null\n          }\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nInvalid value for argument `not`. Expected AppointmentStatus.","name":"PrismaClientValidationError","service":"nurox-api","stack":"PrismaClientValidationError: \nInvalid `prisma.appointment.findMany()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:59\n\n  554 endDate.setHours(23, 59, 59, 999);\n  555 \n  556 // Get all appointments for this doctor on this date\n→ 557 const bookedAppointments = await prisma.appointment.findMany({\n        where: {\n          doctorId: \"cmc8ylx6x0000c80p4r7o6kzy\",\n          appointmentDate: {\n            gte: new Date(\"2025-06-22T18:30:00.000Z\"),\n            lte: new Date(\"2025-06-23T18:29:59.999Z\")\n          },\n          status: {\n            not: \"CANCELLED\"\n                 ~~~~~~~~~~~\n          },\n          tokenNumber: {\n            not: null\n          }\n        },\n        select: {\n          tokenNumber: true,\n          status: true\n        }\n      })\n\nInvalid value for argument `not`. Expected AppointmentStatus.\n    at wn (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getTokenAvailability (/home/udara/Documents/CCCU/nurox-backend/src/controllers/appointmentController.js:557:34)","timestamp":"2025-06-24 00:30:37"}
{"clientVersion":"5.22.0","level":"error","message":"Login error: \nInvalid `prisma.user.findUnique()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/authController.js:108:38\n\n  105 const { email, password } = req.body;\n  106 \n  107 // Find user with role-specific profiles\n→ 108 const user = await prisma.user.findUnique(\nCan't reach database server at `db.dksvomenfhqajbatyyvc.supabase.co:5432`\n\nPlease make sure your database server is running at `db.dksvomenfhqajbatyyvc.supabase.co:5432`.","name":"PrismaClientInitializationError","service":"nurox-api","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/authController.js:108:38\n\n  105 const { email, password } = req.body;\n  106 \n  107 // Find user with role-specific profiles\n→ 108 const user = await prisma.user.findUnique(\nCan't reach database server at `db.dksvomenfhqajbatyyvc.supabase.co:5432`\n\nPlease make sure your database server is running at `db.dksvomenfhqajbatyyvc.supabase.co:5432`.\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:7615)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async login (/home/udara/Documents/CCCU/nurox-backend/src/controllers/authController.js:108:20)","timestamp":"2025-06-26 00:14:30"}
{"clientVersion":"5.22.0","level":"error","message":"Login error: \nInvalid `prisma.user.findUnique()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/authController.js:108:38\n\n  105 const { email, password } = req.body;\n  106 \n  107 // Find user with role-specific profiles\n→ 108 const user = await prisma.user.findUnique(\nCan't reach database server at `db.dksvomenfhqajbatyyvc.supabase.co:5432`\n\nPlease make sure your database server is running at `db.dksvomenfhqajbatyyvc.supabase.co:5432`.","name":"PrismaClientInitializationError","service":"nurox-api","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/authController.js:108:38\n\n  105 const { email, password } = req.body;\n  106 \n  107 // Find user with role-specific profiles\n→ 108 const user = await prisma.user.findUnique(\nCan't reach database server at `db.dksvomenfhqajbatyyvc.supabase.co:5432`\n\nPlease make sure your database server is running at `db.dksvomenfhqajbatyyvc.supabase.co:5432`.\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:7615)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async login (/home/udara/Documents/CCCU/nurox-backend/src/controllers/authController.js:108:20)","timestamp":"2025-06-26 00:18:16"}
{"clientVersion":"5.22.0","level":"error","message":"Login error: \nInvalid `prisma.user.findUnique()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/authController.js:108:38\n\n  105 const { email, password } = req.body;\n  106 \n  107 // Find user with role-specific profiles\n→ 108 const user = await prisma.user.findUnique(\nCan't reach database server at `db.dksvomenfhqajbatyyvc.supabase.co:5432`\n\nPlease make sure your database server is running at `db.dksvomenfhqajbatyyvc.supabase.co:5432`.","name":"PrismaClientInitializationError","service":"nurox-api","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/authController.js:108:38\n\n  105 const { email, password } = req.body;\n  106 \n  107 // Find user with role-specific profiles\n→ 108 const user = await prisma.user.findUnique(\nCan't reach database server at `db.dksvomenfhqajbatyyvc.supabase.co:5432`\n\nPlease make sure your database server is running at `db.dksvomenfhqajbatyyvc.supabase.co:5432`.\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:7615)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async login (/home/udara/Documents/CCCU/nurox-backend/src/controllers/authController.js:108:20)","timestamp":"2025-06-26 00:19:18"}
{"clientVersion":"5.22.0","level":"error","message":"Login error: \nInvalid `prisma.user.findUnique()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/authController.js:108:38\n\n  105 const { email, password } = req.body;\n  106 \n  107 // Find user with role-specific profiles\n→ 108 const user = await prisma.user.findUnique(\nCan't reach database server at `db.dksvomenfhqajbatyyvc.supabase.co:5432`\n\nPlease make sure your database server is running at `db.dksvomenfhqajbatyyvc.supabase.co:5432`.","name":"PrismaClientInitializationError","service":"nurox-api","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/authController.js:108:38\n\n  105 const { email, password } = req.body;\n  106 \n  107 // Find user with role-specific profiles\n→ 108 const user = await prisma.user.findUnique(\nCan't reach database server at `db.dksvomenfhqajbatyyvc.supabase.co:5432`\n\nPlease make sure your database server is running at `db.dksvomenfhqajbatyyvc.supabase.co:5432`.\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:7615)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async login (/home/udara/Documents/CCCU/nurox-backend/src/controllers/authController.js:108:20)","timestamp":"2025-06-26 06:17:25"}
{"clientVersion":"5.22.0","level":"error","message":"Login error: \nInvalid `prisma.user.findUnique()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/authController.js:108:38\n\n  105 const { email, password } = req.body;\n  106 \n  107 // Find user with role-specific profiles\n→ 108 const user = await prisma.user.findUnique(\nCan't reach database server at `db.dksvomenfhqajbatyyvc.supabase.co:5432`\n\nPlease make sure your database server is running at `db.dksvomenfhqajbatyyvc.supabase.co:5432`.","name":"PrismaClientInitializationError","service":"nurox-api","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/authController.js:108:38\n\n  105 const { email, password } = req.body;\n  106 \n  107 // Find user with role-specific profiles\n→ 108 const user = await prisma.user.findUnique(\nCan't reach database server at `db.dksvomenfhqajbatyyvc.supabase.co:5432`\n\nPlease make sure your database server is running at `db.dksvomenfhqajbatyyvc.supabase.co:5432`.\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:7615)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async login (/home/udara/Documents/CCCU/nurox-backend/src/controllers/authController.js:108:20)","timestamp":"2025-06-26 06:18:27"}
{"ip":"::ffff:192.168.0.102","level":"error","message":"Error: Unexpected token ! in JSON at position 48","method":"POST","service":"nurox-api","stack":"SyntaxError: Unexpected token ! in JSON at position 48\n    at JSON.parse (<anonymous>)\n    at parse (/home/udara/Documents/CCCU/nurox-backend/node_modules/body-parser/lib/types/json.js:92:19)\n    at /home/udara/Documents/CCCU/nurox-backend/node_modules/body-parser/lib/read.js:128:18\n    at AsyncResource.runInAsyncScope (node:async_hooks:203:9)\n    at invokeCallback (/home/udara/Documents/CCCU/nurox-backend/node_modules/raw-body/index.js:238:16)\n    at done (/home/udara/Documents/CCCU/nurox-backend/node_modules/raw-body/index.js:227:7)\n    at IncomingMessage.onEnd (/home/udara/Documents/CCCU/nurox-backend/node_modules/raw-body/index.js:287:7)\n    at IncomingMessage.emit (node:events:517:28)\n    at endReadableNT (node:internal/streams/readable:1400:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)","timestamp":"2025-07-08 10:08:00","url":"/api/auth/register","userAgent":"curl/8.5.0"}
{"level":"error","message":"Token refresh error: Invalid refresh token","service":"nurox-api","stack":"Error: Invalid refresh token\n    at refreshAccessToken (/home/udara/Documents/CCCU/nurox-backend/src/utils/generateToken.js:97:11)\n    at refreshToken (/home/udara/Documents/CCCU/nurox-backend/src/controllers/authController.js:225:28)\n    at newFn (/home/udara/Documents/CCCU/nurox-backend/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/udara/Documents/CCCU/nurox-backend/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/udara/Documents/CCCU/nurox-backend/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/udara/Documents/CCCU/nurox-backend/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/udara/Documents/CCCU/nurox-backend/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/udara/Documents/CCCU/nurox-backend/node_modules/express/lib/router/layer.js:95:5)\n    at /home/udara/Documents/CCCU/nurox-backend/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/udara/Documents/CCCU/nurox-backend/node_modules/express/lib/router/index.js:346:12)","timestamp":"2025-07-09 08:59:55"}
{"clientVersion":"5.22.0","level":"error","message":"Login error: \nInvalid `prisma.user.findUnique()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/authController.js:108:38\n\n  105 const { email, password } = req.body;\n  106 \n  107 // Find user with role-specific profiles\n→ 108 const user = await prisma.user.findUnique(\nCan't reach database server at `aws-0-ap-southeast-1.pooler.supabase.com:5432`\n\nPlease make sure your database server is running at `aws-0-ap-southeast-1.pooler.supabase.com:5432`.","name":"PrismaClientInitializationError","service":"nurox-api","stack":"PrismaClientInitializationError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/authController.js:108:38\n\n  105 const { email, password } = req.body;\n  106 \n  107 // Find user with role-specific profiles\n→ 108 const user = await prisma.user.findUnique(\nCan't reach database server at `aws-0-ap-southeast-1.pooler.supabase.com:5432`\n\nPlease make sure your database server is running at `aws-0-ap-southeast-1.pooler.supabase.com:5432`.\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:7615)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async login (/home/udara/Documents/CCCU/nurox-backend/src/controllers/authController.js:108:20)","timestamp":"2025-07-09 09:18:46"}
{"level":"error","message":"Token refresh failed: Invalid refresh token","service":"nurox-api","stack":"Error: Invalid refresh token\n    at refreshAccessToken (/home/udara/Documents/CCCU/nurox-backend/src/utils/generateToken.js:97:11)\n    at refreshToken (/home/udara/Documents/CCCU/nurox-backend/src/controllers/authController.js:262:30)\n    at newFn (/home/udara/Documents/CCCU/nurox-backend/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/udara/Documents/CCCU/nurox-backend/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/udara/Documents/CCCU/nurox-backend/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/udara/Documents/CCCU/nurox-backend/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/udara/Documents/CCCU/nurox-backend/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/udara/Documents/CCCU/nurox-backend/node_modules/express/lib/router/layer.js:95:5)\n    at /home/udara/Documents/CCCU/nurox-backend/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/udara/Documents/CCCU/nurox-backend/node_modules/express/lib/router/index.js:346:12)","timestamp":"2025-07-14 17:29:55"}
{"level":"error","message":"Token refresh failed: Invalid refresh token","service":"nurox-api","stack":"Error: Invalid refresh token\n    at refreshAccessToken (/home/udara/Documents/CCCU/nurox-backend/src/utils/generateToken.js:97:11)\n    at refreshToken (/home/udara/Documents/CCCU/nurox-backend/src/controllers/authController.js:262:30)\n    at newFn (/home/udara/Documents/CCCU/nurox-backend/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/udara/Documents/CCCU/nurox-backend/node_modules/express/lib/router/layer.js:95:5)\n    at next (/home/udara/Documents/CCCU/nurox-backend/node_modules/express/lib/router/route.js:149:13)\n    at Route.dispatch (/home/udara/Documents/CCCU/nurox-backend/node_modules/express/lib/router/route.js:119:3)\n    at newFn (/home/udara/Documents/CCCU/nurox-backend/node_modules/express-async-errors/index.js:16:20)\n    at Layer.handle [as handle_request] (/home/udara/Documents/CCCU/nurox-backend/node_modules/express/lib/router/layer.js:95:5)\n    at /home/udara/Documents/CCCU/nurox-backend/node_modules/express/lib/router/index.js:284:15\n    at Function.process_params (/home/udara/Documents/CCCU/nurox-backend/node_modules/express/lib/router/index.js:346:12)","timestamp":"2025-07-17 01:06:59"}
{"expiredAt":"2025-07-10T04:00:55.000Z","level":"error","message":"Socket authentication error: jwt expired","name":"TokenExpiredError","service":"nurox-api","stack":"TokenExpiredError: jwt expired\n    at /home/udara/Documents/CCCU/nurox-backend/node_modules/jsonwebtoken/verify.js:190:21\n    at getSecret (/home/udara/Documents/CCCU/nurox-backend/node_modules/jsonwebtoken/verify.js:97:14)\n    at module.exports [as verify] (/home/udara/Documents/CCCU/nurox-backend/node_modules/jsonwebtoken/verify.js:101:10)\n    at RealtimeService.authenticateSocket (/home/udara/Documents/CCCU/nurox-backend/src/services/realtimeService.js:37:27)\n    at run (/home/udara/Documents/CCCU/nurox-backend/node_modules/socket.io/dist/namespace.js:130:19)\n    at Namespace.run (/home/udara/Documents/CCCU/nurox-backend/node_modules/socket.io/dist/namespace.js:141:9)\n    at Namespace._add (/home/udara/Documents/CCCU/nurox-backend/node_modules/socket.io/dist/namespace.js:218:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-07-17 01:06:59"}
{"clientVersion":"5.22.0","code":"P2003","level":"error","message":"Create PayHere payment error: \nInvalid `prisma.payment.create()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/paymentController.js:40:44\n\n  37 const orderId = `NUROX-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  38 \n  39 // Create payment record\n→ 40 const payment = await prisma.payment.create(\nForeign key constraint violated: `payments_appointmentId_fkey (index)`","meta":{"field_name":"payments_appointmentId_fkey (index)","modelName":"Payment"},"name":"PrismaClientKnownRequestError","service":"nurox-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.payment.create()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/paymentController.js:40:44\n\n  37 const orderId = `NUROX-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  38 \n  39 // Create payment record\n→ 40 const payment = await prisma.payment.create(\nForeign key constraint violated: `payments_appointmentId_fkey (index)`\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:7315)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async createPayHerePayment (/home/udara/Documents/CCCU/nurox-backend/src/controllers/paymentController.js:40:23)","timestamp":"2025-07-17 23:01:27"}
{"clientVersion":"5.22.0","code":"P2003","level":"error","message":"Create PayHere payment error: \nInvalid `prisma.payment.create()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/paymentController.js:40:44\n\n  37 const orderId = `NUROX-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  38 \n  39 // Create payment record\n→ 40 const payment = await prisma.payment.create(\nForeign key constraint violated: `payments_appointmentId_fkey (index)`","meta":{"field_name":"payments_appointmentId_fkey (index)","modelName":"Payment"},"name":"PrismaClientKnownRequestError","service":"nurox-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.payment.create()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/paymentController.js:40:44\n\n  37 const orderId = `NUROX-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  38 \n  39 // Create payment record\n→ 40 const payment = await prisma.payment.create(\nForeign key constraint violated: `payments_appointmentId_fkey (index)`\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:7315)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async createPayHerePayment (/home/udara/Documents/CCCU/nurox-backend/src/controllers/paymentController.js:40:23)","timestamp":"2025-07-17 23:02:49"}
{"clientVersion":"5.22.0","code":"P1001","level":"error","message":"Login error: \nInvalid `prisma.user.findUnique()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/authController.js:135:38\n\n  132 const { email, password } = req.body;\n  133 \n  134 // Find user with role-specific profiles\n→ 135 const user = await prisma.user.findUnique(\nCan't reach database server at `aws-0-ap-southeast-1.pooler.supabase.com:5432`\n\nPlease make sure your database server is running at `aws-0-ap-southeast-1.pooler.supabase.com:5432`.","meta":{"database_host":"aws-0-ap-southeast-1.pooler.supabase.com","database_port":5432,"modelName":"User"},"name":"PrismaClientKnownRequestError","service":"nurox-api","stack":"PrismaClientKnownRequestError: \nInvalid `prisma.user.findUnique()` invocation in\n/home/udara/Documents/CCCU/nurox-backend/src/controllers/authController.js:135:38\n\n  132 const { email, password } = req.body;\n  133 \n  134 // Find user with role-specific profiles\n→ 135 const user = await prisma.user.findUnique(\nCan't reach database server at `aws-0-ap-southeast-1.pooler.supabase.com:5432`\n\nPlease make sure your database server is running at `aws-0-ap-southeast-1.pooler.supabase.com:5432`.\n    at $n.handleRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:7315)\n    at $n.handleAndLogRequestError (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/home/udara/Documents/CCCU/nurox-backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async login (/home/udara/Documents/CCCU/nurox-backend/src/controllers/authController.js:135:20)","timestamp":"2025-07-21 06:14:50"}
